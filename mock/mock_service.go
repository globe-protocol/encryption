// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_encryption is a generated GoMock package.
package mock_encryption

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEncryptionService is a mock of EncryptionService interface.
type MockEncryptionService struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptionServiceMockRecorder
}

// MockEncryptionServiceMockRecorder is the mock recorder for MockEncryptionService.
type MockEncryptionServiceMockRecorder struct {
	mock *MockEncryptionService
}

// NewMockEncryptionService creates a new mock instance.
func NewMockEncryptionService(ctrl *gomock.Controller) *MockEncryptionService {
	mock := &MockEncryptionService{ctrl: ctrl}
	mock.recorder = &MockEncryptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptionService) EXPECT() *MockEncryptionServiceMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockEncryptionService) Decrypt(eData, eData2 interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", eData, eData2)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockEncryptionServiceMockRecorder) Decrypt(eData, eData2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockEncryptionService)(nil).Decrypt), eData, eData2)
}

// Encrypt mocks base method.
func (m *MockEncryptionService) Encrypt(eData interface{}) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", eData)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncryptionServiceMockRecorder) Encrypt(eData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncryptionService)(nil).Encrypt), eData)
}
